{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\formvm\\\\ClusterForm\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [machines, setMachines] = useState([]);\n  useEffect(() => {\n    loadMachines();\n    const handleStorageChange = () => loadMachines();\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n  // Fonction pour charger les machines avec statut actualisé\n  const loadMachines = async () => {\n    const storedMachines = JSON.parse(localStorage.getItem(\"vms\")) || [];\n    const updatedMachines = await Promise.all(storedMachines.map(async machine => {\n      try {\n        const response = await fetch('http://localhost:5000/get-vm-status', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            vm_name: machine.hostname,\n            mode: machine.mode || 'local'\n          })\n        });\n        const data = await response.json();\n        return {\n          ...machine,\n          status: data.status\n        };\n      } catch (error) {\n        return {\n          ...machine,\n          status: 'Erreur'\n        };\n      }\n    }));\n    setMachines(updatedMachines);\n  };\n  useEffect(() => {\n    loadMachines();\n    const interval = setInterval(loadMachines, 15000); // Mise à jour toutes les 15s\n    return () => clearInterval(interval);\n  }, []);\n  const handleStart = async machine => {\n    try {\n      // On construit l'objet de requête, incluant le mode et, pour distant, les infos de connexion.\n      const requestData = {\n        mode: machine.mode || \"local\",\n        // Par défaut \"local\"\n        vm_name: machine.hostname\n      };\n      console.log(machine);\n      if (machine.mode === \"distant\") {\n        // Assurez-vous que les informations de connexion pour le mode distant sont présentes\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n      const response = await fetch(\"http://localhost:5000/start-vm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        // Optionnel: Mettre à jour la machine dans localStorage ou rafraîchir le dashboard\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  const handleStop = async machine => {\n    try {\n      // On construit l'objet de requête, incluant le mode et, pour distant, les infos de connexion.\n      const requestData = {\n        mode: machine.mode || \"local\",\n        // Par défaut \"local\"\n        vm_name: machine.hostname\n      };\n      if (machine.mode === \"distant\") {\n        // Assurez-vous que les informations de connexion pour le mode distant sont présentes\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n      const response = await fetch(\"http://localhost:5000/stop-vm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        // Optionnel: Mettre à jour la machine dans localStorage ou rafraîchir le dashboard\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  const handleDelete = async (machine, index) => {\n    try {\n      console.log(\"Machine à supprimer:\", machine);\n      // Utilisez une clé cohérente : ici, on vérifie d'abord vm_name, puis hostname\n      const vmName = machine.hostname;\n      if (!vmName) {\n        alert(\"Erreur: Le nom de la VM n'est pas défini.\");\n        return;\n      }\n      const requestData = {\n        mode: machine.mode || \"local\",\n        vm_name: vmName\n      };\n      console.log(machine);\n      if (machine.mode === \"distant\") {\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n      const response = await fetch(\"http://localhost:5000/delete-vm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        const updatedMachines = machines.filter((_, idx) => idx !== index);\n        localStorage.setItem(\"vms\", JSON.stringify(updatedMachines));\n        setMachines(updatedMachines);\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  const handleOpenTerminal = async machine => {\n    try {\n      const requestData = {\n        mode: machine.mode || \"local\",\n        vm_name: machine.hostname\n      };\n      if (machine.mode === \"distant\") {\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n      const response = await fetch(\"http://localhost:5000/open-terminal-vm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Afficher la configuration SSH (ou ouvrir une nouvelle fenêtre si une solution web SSH est intégrée)\n        alert(`SSH Configuration:\\n${data.sshConfig}`);\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  const filteredMachines = machines.filter(machine => machine.hostname.toLowerCase().includes(searchTerm.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gradient-to-b from-teal-100 to-white min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-center text-teal-600\",\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-end p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        className: \"p-2 border rounded-md\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"min-w-full border-collapse border border-gray-300 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"bg-gray-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Host Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Network\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"RAM\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"CPU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Date of Creation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"SSH Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"p-3 border\",\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredMachines.map((machine, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"text-center border-b\",\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.hostname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.box\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.network\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.ram\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.cpu\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: `p-3 border font-semibold ${getStatusColor(machine.status)}`,\n            children: machine.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: [machine.ipAddress, \":\", machine.port]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border\",\n            children: machine.mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"p-3 border flex justify-around\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleStart(machine),\n              className: \"text-green-500 hover:text-green-700\",\n              children: \"\\u25B6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleStop(machine),\n              className: \"text-yellow-500 hover:text-yellow-700\",\n              children: \"\\u25A0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOpenTerminal(machine),\n              className: \"text-blue-500 hover:text-blue-700\",\n              children: \"\\u2398\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDelete(machine),\n              className: \"text-red-500 hover:text-red-700\",\n              children: \"\\u2716\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n\n  // Fonction pour déterminer la couleur du statut\n  const getStatusColor = status => {\n    switch (status) {\n      case 'running':\n        return 'text-green-500';\n      case 'poweroff':\n        return 'text-red-500';\n      case 'Non autorisé':\n        return 'text-orange-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n};\n_s(Dashboard, \"WKkBc9iU4tRJjiK5m9r3+ybN+P4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Dashboard","_s","searchTerm","setSearchTerm","machines","setMachines","loadMachines","handleStorageChange","window","addEventListener","removeEventListener","storedMachines","JSON","parse","localStorage","getItem","updatedMachines","Promise","all","map","machine","response","fetch","method","headers","body","stringify","vm_name","hostname","mode","data","json","status","error","interval","setInterval","clearInterval","handleStart","requestData","console","log","remote_ip","alert","remote_user","remote_password","remote_os","ok","message","handleStop","handleDelete","index","vmName","filter","_","idx","setItem","handleOpenTerminal","sshConfig","filteredMachines","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","box","network","ram","cpu","getStatusColor","date","ipAddress","port","onClick","_c","$RefreshReg$"],"sources":["C:/Users/User/formvm/ClusterForm/src/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Dashboard = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [machines, setMachines] = useState([]);\n  \n\n  useEffect(() => {\n    loadMachines();\n\n    const handleStorageChange = () => loadMachines();\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    return () => window.removeEventListener(\"storage\", handleStorageChange);\n  }, []);\n  // Fonction pour charger les machines avec statut actualisé\n  const loadMachines = async () => {\n    const storedMachines = JSON.parse(localStorage.getItem(\"vms\")) || [];\n\n    const updatedMachines = await Promise.all(\n      storedMachines.map(async (machine) => {\n        try {\n          const response = await fetch('http://localhost:5000/get-vm-status', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              vm_name: machine.hostname,\n              mode: machine.mode || 'local'\n            })\n          });\n\n          const data = await response.json();\n          return { ...machine, status: data.status };\n        } catch (error) {\n          return { ...machine, status: 'Erreur' };\n        }\n      })\n    );\n  \n  setMachines(updatedMachines);\n};\n\nuseEffect(() => {\n  loadMachines();\n  const interval = setInterval(loadMachines, 15000); // Mise à jour toutes les 15s\n  return () => clearInterval(interval);\n}, []);\n  const handleStart = async (machine) => {\n    try {\n      // On construit l'objet de requête, incluant le mode et, pour distant, les infos de connexion.\n      const requestData = {\n        mode: machine.mode || \"local\",  // Par défaut \"local\"\n        vm_name: machine.hostname,\n      };\n      console.log(machine)\n      if (machine.mode === \"distant\") {\n        // Assurez-vous que les informations de connexion pour le mode distant sont présentes\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n\n      const response = await fetch(\"http://localhost:5000/start-vm\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestData),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        // Optionnel: Mettre à jour la machine dans localStorage ou rafraîchir le dashboard\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n\n \n  const handleStop = async (machine) => {\n    try {\n      // On construit l'objet de requête, incluant le mode et, pour distant, les infos de connexion.\n      const requestData = {\n        mode: machine.mode || \"local\",  // Par défaut \"local\"\n        vm_name: machine.hostname,\n      };\n\n      if (machine.mode === \"distant\") {\n        // Assurez-vous que les informations de connexion pour le mode distant sont présentes\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n\n      const response = await fetch(\"http://localhost:5000/stop-vm\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestData),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        // Optionnel: Mettre à jour la machine dans localStorage ou rafraîchir le dashboard\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  \n  const handleDelete = async (machine, index) => {\n    try {\n      console.log(\"Machine à supprimer:\", machine);\n      // Utilisez une clé cohérente : ici, on vérifie d'abord vm_name, puis hostname\n      const vmName = machine.hostname;\n      if (!vmName) {\n        alert(\"Erreur: Le nom de la VM n'est pas défini.\");\n        return;\n      }\n\n      const requestData = {\n        mode: machine.mode || \"local\",\n        vm_name: vmName,\n      };\n      console.log(machine);\n      if (machine.mode === \"distant\") {\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n\n      const response = await fetch(\"http://localhost:5000/delete-vm\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestData),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(`✅ ${data.message}`);\n        const updatedMachines = machines.filter((_, idx) => idx !== index);\n        localStorage.setItem(\"vms\", JSON.stringify(updatedMachines));\n        setMachines(updatedMachines);\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n\n  const handleOpenTerminal = async (machine) => {\n    try {\n      const requestData = {\n        mode: machine.mode || \"local\",\n        vm_name: machine.hostname,\n      };\n      if (machine.mode === \"distant\") {\n        if (!machine.remote_ip) {\n          alert(\"Pour le mode distant, veuillez renseigner l'adresse IP de la machine distante.\");\n          return;\n        }\n        requestData.remote_ip = machine.remote_ip;\n        requestData.remote_user = machine.remote_user;\n        requestData.remote_password = machine.remote_password;\n        requestData.remote_os = machine.remote_os;\n      }\n      const response = await fetch(\"http://localhost:5000/open-terminal-vm\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(requestData),\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Afficher la configuration SSH (ou ouvrir une nouvelle fenêtre si une solution web SSH est intégrée)\n        alert(`SSH Configuration:\\n${data.sshConfig}`);\n      } else {\n        alert(`❌ Erreur: ${data.error}`);\n      }\n    } catch (error) {\n      console.error(\"Erreur de requête:\", error);\n      alert(\"Erreur lors de la communication avec le serveur.\");\n    }\n  };\n  const filteredMachines = machines.filter((machine) =>\n    machine.hostname.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n  \n  return (\n    <div className=\"p-6 bg-gradient-to-b from-teal-100 to-white min-h-screen\">\n      <h1 className=\"text-4xl font-bold text-center text-teal-600\">Dashboard</h1>\n      <div className=\"flex justify-end p-4\">\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          className=\"p-2 border rounded-md\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      <table className=\"min-w-full border-collapse border border-gray-300 rounded-lg\">\n        <thead>\n          <tr className=\"bg-gray-100\">\n            <th className=\"p-3 border\">Host Name</th>\n            <th className=\"p-3 border\">Box</th>\n            <th className=\"p-3 border\">Network</th>\n            <th className=\"p-3 border\">RAM</th>\n            <th className=\"p-3 border\">CPU</th>\n            <th className=\"p-3 border\">Status</th>\n            <th className=\"p-3 border\">Date of Creation</th>\n            <th className=\"p-3 border\">SSH Address</th>\n            <th className=\"p-3 border\">Mode</th>\n            <th className=\"p-3 border\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredMachines.map((machine, index) => (\n            <tr key={index} className=\"text-center border-b\">\n              <td className=\"p-3 border\">{machine.hostname}</td>\n              <td className=\"p-3 border\">{machine.box}</td>\n              <td className=\"p-3 border\">{machine.network}</td>\n              <td className=\"p-3 border\">{machine.ram}</td>\n              <td className=\"p-3 border\">{machine.cpu}</td>\n              <td className={`p-3 border font-semibold ${getStatusColor(machine.status)}`}>\n                {machine.status}\n              </td>\n              <td className=\"p-3 border\">{machine.date}</td>\n              <td className=\"p-3 border\">{machine.ipAddress}:{machine.port}</td>\n              <td className=\"p-3 border\">{machine.mode} \n</td>\n              \n              <td className=\"p-3 border flex justify-around\">\n                <button onClick={() => handleStart(machine)} className=\"text-green-500 hover:text-green-700\">▶</button>\n                <button onClick={() => handleStop(machine)} className=\"text-yellow-500 hover:text-yellow-700\">■</button>\n                <button onClick={() => handleOpenTerminal(machine)} className=\"text-blue-500 hover:text-blue-700\">⎘</button>\n                <button onClick={() => handleDelete(machine)} className=\"text-red-500 hover:text-red-700\">✖</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  // Fonction pour déterminer la couleur du statut\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'running':\n        return 'text-green-500';\n      case 'poweroff':\n        return 'text-red-500';\n      case 'Non autorisé':\n        return 'text-orange-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}