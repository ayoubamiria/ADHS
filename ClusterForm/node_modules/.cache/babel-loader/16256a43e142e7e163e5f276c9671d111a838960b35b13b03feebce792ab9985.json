{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc msi\\\\pfe2\\\\ADHS\\\\ClusterForm\\\\src\\\\DistantConfig.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DistantConfig = () => {\n  _s();\n  var _location$state;\n  const [servers, setServers] = useState([]);\n  const [selectedSourceServer, setSelectedSourceServer] = useState(null);\n  const [selectedTemplateId, setSelectedTemplateId] = useState(\"\");\n  const [hostname, setHostname] = useState(\"\");\n  const [vm_id, setVmId] = useState(\"\");\n  const [network, setNetwork] = useState(\"nat\");\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const targetServer = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.targetServer;\n  useEffect(() => {\n    const savedServers = JSON.parse(localStorage.getItem(\"servers\")) || [];\n    setServers(savedServers);\n  }, []);\n  useEffect(() => {\n    if (selectedSourceServer && selectedSourceServer.templates.length > 0) {\n      setSelectedTemplateId(selectedSourceServer.templates[0].id);\n    } else {\n      setSelectedTemplateId(\"\");\n    }\n  }, [selectedSourceServer]);\n  const validateInputs = () => {\n    if (!selectedSourceServer || !selectedTemplateId || !hostname || !vm_id) {\n      alert(\"Veuillez remplir tous les champs.\");\n      return false;\n    }\n    if (vm_id < 100 || vm_id > 999999) {\n      alert(\"L'ID de la VM doit être compris entre 100 et 999999.\");\n      return false;\n    }\n    return true;\n  };\n  const handleSubmit = async () => {\n    if (!validateInputs()) return;\n    setIsLoading(true);\n    try {\n      const isSameServer = selectedSourceServer.serverIp === targetServer.serverIp;\n      if (!isSameServer) {\n        const response = await axios.post(\"http://localhost:5000/clone_template\", {\n          sourceProxmoxIp: selectedSourceServer.serverIp,\n          targetProxmoxIp: targetServer.serverIp,\n          template_id: selectedTemplateId,\n          username: selectedSourceServer.user,\n          password: selectedSourceServer.password\n        });\n        if (!response.data.success) {\n          alert(`Erreur lors du clonage : ${response.data.message}`);\n          return;\n        }\n        alert(\"Clonage réussi !\");\n      }\n      const createResponse = await axios.post(\"http://localhost:5000/create_vmprox\", {\n        proxmoxIp: targetServer.serverIp,\n        password: targetServer.password,\n        hostname: hostname,\n        targetNode: targetServer.node,\n        network: network,\n        template: \"ubuntu-template\",\n        vm_id: vm_id\n      });\n      if (createResponse.data.error) {\n        alert(`Erreur lors de la création de la VM : ${createResponse.data.error}`);\n      } else {\n        alert(\"VM créée avec succès !\");\n\n        // Structure the VM data correctly\n        const newVm = {\n          proxmoxIp: targetServer.serverIp,\n          nodeName: targetServer.node,\n          password: targetServer.password,\n          hostname: hostname,\n          vm_id: vm_id,\n          network: network,\n          ipAddress: 'N/A',\n          // You can update this later if the API provides an IP\n          template: \"ubuntu-template\",\n          status: 'Stopped',\n          // Default status\n          creationDate: new Date().toISOString().split('T')[0] // Current date\n        };\n\n        // Navigate to Dashboard and pass the new VM data\n        navigate(\"/dashboard\", {\n          state: {\n            newVm\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Erreur :\", error);\n      alert(\"Erreur lors du clonage ou de la création de la VM.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center justify-center bg-gradient-to-b from-teal-100 to-white p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 right-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/dashboard\"),\n        className: \"bg-teal-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-teal-600\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-teal-600 mb-6\",\n      children: \"Distant Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-lg w-96\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium\",\n        children: \"Serveur source:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedSourceServer ? selectedSourceServer.id : \"\",\n        onChange: e => {\n          const server = servers.find(s => s.id.toString() === e.target.value);\n          setSelectedSourceServer(server || null);\n        },\n        className: \"w-full p-2 border rounded mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"S\\xE9lectionnez un serveur source\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), servers.map(server => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: server.id,\n          children: [server.serverIp, \" (\", server.node, \")\"]\n        }, server.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium\",\n        children: \"Template ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedTemplateId,\n        onChange: e => setSelectedTemplateId(e.target.value),\n        className: \"w-full p-2 border rounded mb-4\",\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"S\\xE9lectionnez un template ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), selectedSourceServer === null || selectedSourceServer === void 0 ? void 0 : selectedSourceServer.templates.map((template, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: template.id,\n          children: template.id\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium\",\n        children: \"Hostname:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Entrez le hostname\",\n        value: hostname,\n        onChange: e => setHostname(e.target.value),\n        className: \"w-full p-2 border rounded mb-4\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium\",\n        children: \"VM ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Entrez l'ID de la VM\",\n        value: vm_id,\n        onChange: e => setVmId(Number(e.target.value)),\n        className: \"w-full p-2 border rounded mb-4\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-sm font-medium\",\n        children: \"Type de r\\xE9seau:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: network,\n        onChange: e => setNetwork(e.target.value),\n        className: \"w-full p-2 border rounded mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"nat\",\n          children: \"NAT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"bridged\",\n          children: \"Bridged\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSubmit,\n        disabled: isLoading,\n        className: \"w-full bg-teal-500 text-white p-2 rounded-lg shadow-md hover:bg-teal-600 disabled:bg-gray-400\",\n        children: isLoading ? \"Chargement...\" : \"Cloner et créer la VM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(DistantConfig, \"eUnHJ82kiMc330p0Kx/ShX3puEY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = DistantConfig;\nexport default DistantConfig;\nvar _c;\n$RefreshReg$(_c, \"DistantConfig\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","jsxDEV","_jsxDEV","DistantConfig","_s","_location$state","servers","setServers","selectedSourceServer","setSelectedSourceServer","selectedTemplateId","setSelectedTemplateId","hostname","setHostname","vm_id","setVmId","network","setNetwork","isLoading","setIsLoading","navigate","location","targetServer","state","savedServers","JSON","parse","localStorage","getItem","templates","length","id","validateInputs","alert","handleSubmit","isSameServer","serverIp","response","post","sourceProxmoxIp","targetProxmoxIp","template_id","username","user","password","data","success","message","createResponse","proxmoxIp","targetNode","node","template","error","newVm","nodeName","ipAddress","status","creationDate","Date","toISOString","split","console","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","server","find","s","toString","target","disabled","map","required","index","type","placeholder","Number","_c","$RefreshReg$"],"sources":["C:/Users/pc msi/pfe2/ADHS/ClusterForm/src/DistantConfig.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst DistantConfig = () => {\r\n  const [servers, setServers] = useState([]);\r\n  const [selectedSourceServer, setSelectedSourceServer] = useState(null);\r\n  const [selectedTemplateId, setSelectedTemplateId] = useState(\"\");\r\n  const [hostname, setHostname] = useState(\"\");\r\n  const [vm_id, setVmId] = useState(\"\");\r\n  const [network, setNetwork] = useState(\"nat\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const targetServer = location.state?.targetServer;\r\n\r\n  useEffect(() => {\r\n    const savedServers = JSON.parse(localStorage.getItem(\"servers\")) || [];\r\n    setServers(savedServers);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedSourceServer && selectedSourceServer.templates.length > 0) {\r\n      setSelectedTemplateId(selectedSourceServer.templates[0].id);\r\n    } else {\r\n      setSelectedTemplateId(\"\");\r\n    }\r\n  }, [selectedSourceServer]);\r\n\r\n  const validateInputs = () => {\r\n    if (!selectedSourceServer || !selectedTemplateId || !hostname || !vm_id) {\r\n      alert(\"Veuillez remplir tous les champs.\");\r\n      return false;\r\n    }\r\n\r\n    if (vm_id < 100 || vm_id > 999999) {\r\n      alert(\"L'ID de la VM doit être compris entre 100 et 999999.\");\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!validateInputs()) return;\r\n  \r\n    setIsLoading(true);\r\n    try {\r\n      const isSameServer = selectedSourceServer.serverIp === targetServer.serverIp;\r\n  \r\n      if (!isSameServer) {\r\n        const response = await axios.post(\"http://localhost:5000/clone_template\", {\r\n          sourceProxmoxIp: selectedSourceServer.serverIp,\r\n          targetProxmoxIp: targetServer.serverIp,\r\n          template_id: selectedTemplateId,\r\n          username: selectedSourceServer.user,\r\n          password: selectedSourceServer.password,\r\n        });\r\n  \r\n        if (!response.data.success) {\r\n          alert(`Erreur lors du clonage : ${response.data.message}`);\r\n          return;\r\n        }\r\n        alert(\"Clonage réussi !\");\r\n      }\r\n  \r\n      const createResponse = await axios.post(\"http://localhost:5000/create_vmprox\", {\r\n        proxmoxIp: targetServer.serverIp,\r\n        password: targetServer.password,\r\n        hostname: hostname,\r\n        targetNode: targetServer.node,\r\n        network: network,\r\n        template: \"ubuntu-template\",\r\n        vm_id: vm_id,\r\n      });\r\n  \r\n      if (createResponse.data.error) {\r\n        alert(`Erreur lors de la création de la VM : ${createResponse.data.error}`);\r\n      } else {\r\n        alert(\"VM créée avec succès !\");\r\n  \r\n        // Structure the VM data correctly\r\n        const newVm = {\r\n          proxmoxIp: targetServer.serverIp,\r\n          nodeName: targetServer.node,\r\n          password: targetServer.password,\r\n          hostname: hostname,\r\n          vm_id: vm_id,\r\n          network: network,\r\n          ipAddress: 'N/A', // You can update this later if the API provides an IP\r\n          template: \"ubuntu-template\",\r\n          status: 'Stopped', // Default status\r\n          creationDate: new Date().toISOString().split('T')[0], // Current date\r\n        };\r\n  \r\n        // Navigate to Dashboard and pass the new VM data\r\n        navigate(\"/dashboard\", { state: { newVm } });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur :\", error);\r\n      alert(\"Erreur lors du clonage ou de la création de la VM.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-gradient-to-b from-teal-100 to-white p-4\">\r\n      <div className=\"absolute top-4 right-4\">\r\n        <button\r\n          onClick={() => navigate(\"/dashboard\")}\r\n          className=\"bg-teal-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-teal-600\"\r\n        >\r\n          Dashboard\r\n        </button>\r\n      </div>\r\n      <h1 className=\"text-4xl font-bold text-teal-600 mb-6\">Distant Mode</h1>\r\n      <div className=\"bg-white p-6 rounded-lg shadow-lg w-96\">\r\n        <label className=\"block text-sm font-medium\">Serveur source:</label>\r\n        <select\r\n          value={selectedSourceServer ? selectedSourceServer.id : \"\"}\r\n          onChange={(e) => {\r\n            const server = servers.find((s) => s.id.toString() === e.target.value);\r\n            setSelectedSourceServer(server || null);\r\n          }}\r\n          className=\"w-full p-2 border rounded mb-4\"\r\n        >\r\n          <option value=\"\" disabled>Sélectionnez un serveur source</option>\r\n          {servers.map((server) => (\r\n            <option key={server.id} value={server.id}>\r\n              {server.serverIp} ({server.node})\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label className=\"block text-sm font-medium\">Template ID:</label>\r\n        <select\r\n          value={selectedTemplateId}\r\n          onChange={(e) => setSelectedTemplateId(e.target.value)}\r\n          className=\"w-full p-2 border rounded mb-4\"\r\n          required\r\n        >\r\n          <option value=\"\" disabled>Sélectionnez un template ID</option>\r\n          {selectedSourceServer?.templates.map((template, index) => (\r\n            <option key={index} value={template.id}>\r\n              {template.id}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <label className=\"block text-sm font-medium\">Hostname:</label>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Entrez le hostname\"\r\n          value={hostname}\r\n          onChange={(e) => setHostname(e.target.value)}\r\n          className=\"w-full p-2 border rounded mb-4\"\r\n          required\r\n        />\r\n\r\n        <label className=\"block text-sm font-medium\">VM ID:</label>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Entrez l'ID de la VM\"\r\n          value={vm_id}\r\n          onChange={(e) => setVmId(Number(e.target.value))}\r\n          className=\"w-full p-2 border rounded mb-4\"\r\n          required\r\n        />\r\n\r\n        <label className=\"block text-sm font-medium\">Type de réseau:</label>\r\n        <select\r\n          value={network}\r\n          onChange={(e) => setNetwork(e.target.value)}\r\n          className=\"w-full p-2 border rounded mb-4\"\r\n        >\r\n          <option value=\"nat\">NAT</option>\r\n          <option value=\"bridged\">Bridged</option>\r\n        </select>\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleSubmit}\r\n          disabled={isLoading}\r\n          className=\"w-full bg-teal-500 text-white p-2 rounded-lg shadow-md hover:bg-teal-600 disabled:bg-gray-400\"\r\n        >\r\n          {isLoading ? \"Chargement...\" : \"Cloner et créer la VM\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DistantConfig;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}