---
- name: Build et push des images Docker (backend & frontend)
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    docker_username: "ayoub126"
    backend_image: "backend:latest"
    frontend_image: "frontend:latest"
    backend_context: "./back_vag"
    backend_dockerfile: "Dockerfile"
    frontend_context: "./ClusterForm"
    frontend_dockerfile: "Dockerfile.dev"
    docker_password: "{{ docker_password }}"

  tasks:

    - name: Builder l'image Docker du backend
      shell: >
        docker build -t {{ backend_image }}
        -f {{ backend_context }}/{{ backend_dockerfile }}
        {{ backend_context }}

    - name: Builder l'image Docker du frontend
      shell: >
        docker build -t {{ frontend_image }}
        -f {{ frontend_context }}/{{ frontend_dockerfile }}
        {{ frontend_context }}

    - name: Connexion à Docker Hub
      shell: echo "{{ docker_password }}" | docker login -u "{{ docker_username }}" --password-stdin
    
    - name: Retagger l'image backend pour ton repository Docker Hub
      shell: docker tag {{ backend_image }} {{ docker_username }}/backend:latest

    - name: Pusher l'image backend
      shell: docker push {{ docker_username }}/backend:latest

    - name: Retagger l'image frontend pour ton repository Docker Hub
      shell: docker tag {{ frontend_image }} {{ docker_username }}/frontend:latest

    - name: Pusher l'image frontend
      shell: docker push {{ docker_username }}/frontend:latest

- name: Déploiement Kubernetes sur k8s-server
  hosts: k8s-server
  gather_facts: no
  vars:
    # indique à Ansible d’utiliser python3 sur la cible
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Vérifier la présence de python3
      ansible.builtin.raw: which python3
      register: py3_check
      changed_when: false

    - name: Échec si python3 n'est pas trouvé
      ansible.builtin.fail:
        msg: "python3 n'est pas installé sur le serveur k8s-server."
      when: py3_check.stdout == ""

    - name: Créer le namespace si nécessaire
      ansible.builtin.command: kubectl create namespace ayoub
      register: create_ns
      failed_when: false
      changed_when: "'created' in create_ns.stdout"

    - name: Copier puis appliquer tous les manifests Kubernetes
      block:
        - name: Copier {{ item }} vers /tmp
          ansible.builtin.copy:
            src: "/var/lib/jenkins/workspace/ADHS/k8s/{{ item }}"
            dest: "/tmp/{{ item }}"
            mode: '0644'
          loop: "{{ k8s_files }}"

        - name: Appliquer {{ item }}
          ansible.builtin.shell: kubectl apply -f /tmp/{{ item }}
          loop: "{{ k8s_files }}"
      vars:
        k8s_files:
          - pv.yaml
          - pvc.yaml
          - service_back.yaml
          - service_front.yaml
          - deployment_back.yaml
          - deployment_front.yaml
