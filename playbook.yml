---
- name: Build et push des images Docker (backend & frontend)
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    docker_username: "ayoub126"
    backend_image: "backend:latest"
    frontend_image: "frontend:latest"
    backend_context: "./back_vag"
    backend_dockerfile: "Dockerfile"
    frontend_context: "./ClusterForm"
    frontend_dockerfile: "Dockerfile.dev"
    docker_password: "{{ docker_password }}"

  tasks:

    - name: Builder l'image Docker du backend
      shell: >
        docker build -t {{ backend_image }}
        -f {{ backend_context }}/{{ backend_dockerfile }}
        {{ backend_context }}

    - name: Builder l'image Docker du frontend
      shell: >
        docker build -t {{ frontend_image }}
        -f {{ frontend_context }}/{{ frontend_dockerfile }}
        {{ frontend_context }}

    - name: Connexion à Docker Hub
      shell: echo "{{ docker_password }}" | docker login -u "{{ docker_username }}" --password-stdin
    
    - name: Retagger l'image backend pour ton repository Docker Hub
      shell: docker tag {{ backend_image }} {{ docker_username }}/backend:latest

    - name: Pusher l'image backend
      shell: docker push {{ docker_username }}/backend:latest

    - name: Retagger l'image frontend pour ton repository Docker Hub
      shell: docker tag {{ frontend_image }} {{ docker_username }}/frontend:latest

    - name: Pusher l'image frontend
      shell: docker push {{ docker_username }}/frontend:latest

- name: Déploiement Kubernetes sur k8s-server
  hosts: k8s-server
  gather_facts: no

  vars:
    # => on s’assure d’utiliser python3 et d’activer le pipelining pour éviter
    # les appels aux module_utils Python sur la cible
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_pipelining: true

    k8s_workspace: "/var/lib/jenkins/workspace/ADHS/k8s"
    k8s_dest: "/tmp"
    k8s_files:
      - pv.yaml
      - pvc.yaml
      - service_back.yaml
      - service_front.yaml
      - deployment_back.yaml
      - deployment_front.yaml

  tasks:
    - name: Synchroniser tout le dossier k8s vers la cible
      ansible.builtin.synchronize:
        src: "{{ k8s_workspace }}/"
        dest: "{{ k8s_dest }}/"
        mode: push
        # tu peux ajuster les options rsync si besoin
        rsync_opts:
          - "--times"
          - "--omit-dir-times"

    - name: Appliquer les manifests Kubernetes
      ansible.builtin.command:
        cmd: kubectl apply -f {{ k8s_dest }}/{{ item }}
      loop: "{{ k8s_files }}"
